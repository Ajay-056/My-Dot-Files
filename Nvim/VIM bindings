Screen movements:
----------------
--> Ctrl + b - move back one full screen
--> Ctrl + u - move back 1/2 a screen

--> Ctrl + f - move forward one full screen
--> Ctrl + d - move forward 1/2 a screen

H - move to top of screen
M - move to middle of screen
L - move to bottom of screen

zz, zt, zb --> move current line to middle/top/bottom of screen

Buffers & Tabs:
--------------
:e# --> switch back to the previous buffer, won't work if that buffer is not named
Ctrl+6 / Ctrl+^ --> switch back to the previous buffer, works even if that buffer is not named
:e! % ---> Refresh current file buffer
:up | %bd | e# --> First, this updates your current buffer (saves it). Then it closes all open buffers, then it reopens the last buffer.
:% !jq --> Pretty print JSON
:e #1 --> open the first buffer
:e {filename} --> to open a new file in the same tab
:buffers or :ls or :files --> show all buffers
:bn --> open the next file in the buffer list. opens the first buffer if you are on the last buffer (Buffer Next)
:bp --> open the previous file in the buffer list. opens the last buffer if you are on the first buffer (Buffer Previous)

:tabe --> filename open the given file in a new tab (Tab Edit)
:tabm 0 --> move the current tab to the beginning
:tabm --> move the current tab to the end
:tabm +N --> move the current tab N positions to the right
:tabm -N --> move the current tab N positions to the left

Sessions:
---------
:mksession --> proj.vim save the current Vim session with details like cursor position, file list, layout, etc 
               you can customize things to be saved using the sessionoptions setting
               for example, :set sessionoptions+=resize will save resized window information as well
:mksession! --> proj.vim overwrite existing session
:source proj.vim --> restore Vim session from proj.vim file
vim -S proj.vim --> restore a session from the command line when launching Vim

Registers:
----------
1. The unnamed register "" (will always have the contents of last x,s,d,c,y)
2. 10 numbered registers "0 to "9 (0 will always have the last yanked content and 1 will always have the last deleted content, 1-9 will work like stack)
3. The small delete register "- (Last deleted content other than the entire line will be stored. eg dw)
4. 26 named registers "a to "z or "A to "Z
5. Three read-only registers ": (Last used command) ". (Last insert mode text) "% (current file)'
        a. h file-modifiers
        %:p Make file name a full path
        %:h Head of the Filename
        %:t Tail of the Filename
        %:r Root
        %:e Extension
6. Alternate buffer register "# (Contains last opened file) use ctrl + 6 to switch back and forth
7. The expression register "= (powerful register, used to evaluate an expression)
        a. help math, help builtin
        b. toupper("")
        c. join(range(1,10),",") --> to generate comma seperated sequence number
        d. system("ls") --> to run any shell command
        e. toupper(@-) --> to get arguments from another register (- in this case)
        f. eval(join(split(trim(@0),','), '+')) --> to add a line of comma seperated numbers
        g. rand(srand()) % 16 --> Record a macro while using the register to repeat the action, the exp will generate random number from 0 to 15
8. The black hole register "_ (content wont be saved / will be lost. can be used to delete something thats no longer needed)
9. The selection registers "* (Last text selected using mouse) and "+ (System clipboard)
10. Last search pattern register "/ 

To edit/empty the contents of a register --> 
       :let @a='' (To edit an existing macro ctrl+r a, to paste the contents of register) - Method 1
       paste the contents of the regsiter (eg. "ap) and edit the content then yank it back to "a" register (eg. "ay) - Method 2
       qA{commands to append} --> Will append to the existing macro
       You can record an empty macro to clear the contents, for example qbq clears the "b register.

qa --> to start recording @a
q --> to stop recording
50@a --> to repeat action recorded @a 50 times
@@ --> To repeat the last macro used
:reg[isters] - show registers content

Word Movements:
--------------
--> w - jump forwards to the start of a word
--> e - jump forwards to the end of a word
--> b - jump backwards to the start of a word
--> ge - jump backwards to the end of a word

W - jump forwards to the start of a word (words can contain punctuation)
E - jump forwards to the end of a word (words can contain punctuation)
B - jump backwards to the start of a word (words can contain punctuation)
gE - jump backwards to the end of a word (words can contain punctuation)

Delete, Yank, Change:
--------------------
--> diw - delete (cut) word under the cursor
--> daw - delete (cut) word under the cursor and the space after or before it
--> dis - delete inner sentence
--> das - delete a sentence
--> dib - delete inner '(' ')' block
--> dab - delete a '(' ')' block
--> dip - delete inner paragraph
--> dap - delete a paragraph
--> diB - delete inner '{' '}' block
--> daB - delete a '{' '}' block
--> dd - delete (cut) a line
--> dk / d3k, dj / d3j - delete current line and above or below line
--> 2dd - delete (cut) 2 lines
--> dw - delete (cut) the characters of the word from the cursor position to the start of the next word
--> d$ or D - delete (cut) to the end of the line
--> x - delete (cut) character under the cursor. Same as dl
--> X - delete (cut) character before the cursor. Same as dh
--> dG - delete entire file from current line
--> :5d - delete the fifth line
--> :$d - delete the last line (represented by $)
--> :25m0 - move the twenty-fifth line to the start of the file (:m is short for the :move command) 
--> use :t (or :co or :copy) command if you want to copy instead of moving
          :-10t. – Copy the line 10 lines above the current line and paste it below the current line
          :+8t. – Copy the line 8 lines after the current line and paste it below
--> :2,10d - delete the second to tenth lines (comma is used here to separate the start and end ranges)
--> :5,$d - delete the fifth line to the last line
--> :5,$-1d - delete the fifth line to the last but one line
--> :%d - delete all the lines (% is a shortcut for the 1,$ range). Recall that % is a shortcut for the range 1,$

Cut and paste:
--------------
--> yy - yank (copy) a line
--> 2yy or yj / yk - yank (copy) 2 lines
--> yl copy the character under the cursor
--> yw - yank (copy) the characters of the word from the cursor position to the start of the next word
--> yaw - yank (copy) word under the cursor and the space after or before it
--> yiw / yiW - yank a word from any cursor position in the word
--> y$ or Y - yank (copy) to end of line
--> p - put (paste) the clipboard after cursor
--> P - put (paste) before cursor
--> :put - pastes the content after current line
--> :put! - pastes the content before current line
--> ]p - paste the copied content like p command, but changes the indentation level to match the current line
--> [p - paste the copied content like P command, but changes the indentation level to match the current line
--> gp - put (paste) the clipboard after cursor and leave cursor after the new text
--> gP - put (paste) before cursor and leave cursor after the new text
"xy - yank into register x
"xp - paste contents of register x
"+y - yank into the system clipboard register
"+p - paste from the system clipboard register

Replace or change bindings:
---------------------------
r/3ra - replace a single/multiple character(s). r followed by ctrl+e to replace from the character adjacent to the below line, dame for ctrl+y (above line)
R - replace more than one character, until ESC is pressed.
cc - change (replace) entire line
c$ or C - change (replace) to the end of the line
ciw - change (replace) inner word (cursor in any position of the word)
ci" - change the content inside any surround characters like ()[]{}""''  "<your-content>"
cw or ce - change (replace) to the end of the word
xp - transpose two letters (delete and paste)

diw - delete inner word (cursor in any position of the word)
d) delete up to the end of the sentence
s - delete character and substitute text
S - delete line and substitute text (same as cc)

Find characters in a line 
-------------------------
f {character to navigate} --> Move forward to the first occurance of the character
F {character to navigate} --> Move backwards to the first occurance of the character

t {character to navigate} --> Move forward to character before the first occurance of the serached character
T {character to navigate} --> Move backwards to character before the first occurance of the serached character

; --> Move forward to the next occurance of the character. Works only for the last character found using find
, --> Move backwards to the next occurance of the character. Works only for the last character found using fin

vf {character to navigate} --> start selection from current currsor position to the 1st occurance of the character

Text Objects: (a-z)
-------------
a - Arguments
b - Brackets (various)
c - Comments
d - Docstrings
e - Examples (Code Fences)
f - Functions
g - Git Chunk
gn - Go Next (Aside)
h - Left Character (ch{char to replace}, d3h)
i - Indentation Level
j - Junction of next word segment
k - Opposite of j
l - Character object to right
m - Modified
n - Number
o - Objects (classes)
p - Paragraph
q - Quotes
r - README headers
s - Sentences
t - Tags
un - Universe
v - Value (in key-value pairs)
w - Word
x - HTML/XML attributes
y - Y-dimension blank lines
z - Key in key/value pairs
} --> To jump between paragraphs.
) --> To jump between sentences.

Insert mode - inserting/appending text:
--------------------------------------
--> i - insert (append) at the current cursor position before the character
--> I - insert (append) at the start of the line
--> a - insert (append) at the current cursor position after the character
--> A - insert (append) at the end of the line
--> o - append (open) a new line below the current line
--> O - append (open) a new line above the current line
--> ea - insert (append) at the end of the word
--> Ctrl + ox - Temporarily enter normal mode to issue one normal-mode command x.
--> jj (Fast press) from insert mode will change to normal without reaching to esc key.
--> Esc - exit insert mode

Ctrl + rx - insert the contents of register x
Ctrl + w - delete word before the cursor during insert mode
Ctrl + u - delete all the characters before the cursor in the current line, preserves indentation if any
Ctrl + a - will insert the last word typed during last insert mode
Ctrl + y - will duplicate the line above the cursor char by char
Ctrl + j - begin new line during insert mode
Ctrl + h - delete the character before the cursor during insert mode
Ctrl + t - indent (move right) line one shiftwidth during insert mode
Ctrl + d - de-indent (move left) line one shiftwidth during insert mode
Ctrl/Shift Left/Right - To move one word left/right
Ctrl + n - insert (auto-complete) next match before the cursor during insert mode
Ctrl + p - insert (auto-complete) previous match before the cursor during insert mode

Visual Mode
-----------
v
shift + v ----> visual line
ctrl + v ----> visual block

vi( --> selects the content inside the enclosing character used
vip --> select a paragraph
:norm/norm! --> Most useful in visual line mode to apply normal mode commands to multiple lines (eg. A +). 
                Note: to exit out of insert mode ^[ special character to be used by pressing ctrl+v Esc (eg. norm A,^[J)

Find and Replace
----------------

Flags: (These flags are applicable for the substitute command but not the / or ? searches)
******
g --> replace all occurrences within a matching line. by default, only the first matching portion will be replaced
c --> ask for confirmation before each replacement
i --> ignore case for searchpattern
I --> don't ignore case for searchpattern
You can use # as your delimiter and skip escaping the / which makes for something far easier to parse (:#/User/local/bin/#/usr/sbin/#g)

# --> search the word under cursor backwards
* --> search the word under cursor forwards
:/^\s*$/d or :g/^$/d --> To find and remove empty lines in a file 
:g/word_to_find/norm (any normal mode commands) --> To perform normal mode bindings on the founded occurance of words
:g/call/d _ --> deleted content won't be saved anywhere, since it uses the black hole register
:g/^#/t0 --> copy all lines starting with # to the start of the file
:g/cat/ s/animal/mammal/g  -> replace animal with mammal only for the lines containing cat
:1,5 g/call/d --> delete all lines containing call only for the first five lines
:v/jump/d --> delete all lines not containing jump. same as :g!/jump/d
:.,.+20 g/^#/ normal >> --> indent the current line and the next 20 lines only if the line starts with #

:%s/old/new/g --> Replace everywhere in file
:let i=1 | while i <= 8 | execute '%s/Login_0' . i . '_Const/Const_Login_0' . i . '/c' | let i=i+1 | endwhile      (Incremental substitution)
:let i=0 | let j=1 | while j <= 5 | execute '%s/_' . i . '_/_T0' . j . '_/c' | let i=i+1 | let j=j+1 | endwhile    (Incremental substitution 1)
:s/old/new/g --> Replace everywhere in the selected line
:2 s/apple/Mango/i --> replace the first occurrence of apple with Mango on the second line only. i flag matches the searchpattern case insensitively
:3,6 s/call/jump/g --> replace all the occurrences of call with jump on lines 3 to 6. g flag performs search and replace for all the matching occurrences
If there is a space in the search use \+ --> /export\+ PATH
To search for space character, use \s (eg. :%s/\s/, /g)

/searchpattern/s+2 --> place the cursor 2 characters after the start of the match (i.e. the third character of the match)
/searchpattern/s-2 --> place the cursor 2 characters before the start of the match
/searchpattern/e --> place the cursor at the end of the match
/searchpattern/e+4 --> place the cursor 4 characters after the end of the match
/searchpattern/e-4 --> place the cursor 4 characters before the end of the match
/searchpattern/+3 --> place the cursor 3 lines below the match
/searchpattern/-3 --> place the cursor 3 lines above the match
//s+3 to repeat the last search with this new offset

Command mode:
------------
:!ls execute the given shell command and display its output. The results are displayed as part of an expanded Command-line area, doesn't change contents of the file.
:r report.log insert contents of the given file below the current line (! represents shell command, without it represents built in command)
:r! any shell command --> will read the output of the command and paste it below current line (default shell of the an os will be used eg. windows - cmd, linux - bash).
:.! date replace the current line with the output of the given command. Pressing !! in Normal mode will also result in :.!
:%! sort --> sort all the lines. note that this executes an external command, not the built-in :sort command
:3,8! sort --> sort only lines 3 to 8
:.!grep '^Help ' % --> replace the current line with all the lines starting with Help in the current file
:!!sh --> Type any linux command in the file, and to replace the command with its output 
:!sort --> In Visual mode, Select a number values column and to sort it use 

:map --> to view the mappings (use nmap, imap to view mappings of a specific mode)
:sav --> To rename a file within editor  filename.file_extension (Note that it will create a copy of the current file in editor)
:vs path to file --> Vertical split a file 
:sp path to file --> Horizontal split a file 
:noh --> To remove highlights after a search 
:earlier 1m,5m,10m --> To undo changes to last x time
:later  1m,5m,10m --> To redo changes to future x time
:iabbrev/:iab AK Ajay Krishna R --> To abbreviate a keyword using space key. It can be defined in the init.lua file as well to make it permanent
:digraphs --> To enter some special characters that are not in the keyboard (Insert Mode)
          --> To use an diagraph (Ca is mapped to ©) ctrl + kCa, oo - for bullet, -1 for hyphen

Help:
----
:help d
:help deleting
:help CTRL-A
:help i_CTRL-A v_CTRL-A i_<Up> 
:help 'option'

Folds
-----
To create a fold for a paragraph --> zf (use text objects, like ap, ip)
To open the fold created --> zo
To close the fold again --> zc
To open all the nested folds --> zr/zR
To open close all the nested folds --> zm/zM
To disable the folds --> zn
To enable the folds again --> zN
To toggle the folds on/off --> zi
To delete a fold on the cursor line --> zd
To persist the folds after reopening the file --> :mkview :loadview

Others
------
@: --> To repeat the last command executed
z= --> Show spelling corrections
zg --> Add to spelling dictionary
zw --> Remove from spelling dictionary
]s – Jump to the next misspelled word
[s – Jump to the previous misspelled word
`[ --> Jump to beginning of last yanked text
`] --> Jump to end of last yanked text
:center [column], :right [column], :left [column] -- will align the line text accordingly
q: --> open the recent command history in normal mode
q/ --> open the recent search history in normal mode
_ --> go to the start of the first character in the line (if indented)
[[ --> alternate binding for gg (Go to first line in file)
]] --> alternate binding for ctrl + G (Go to last line in file)
>> --> Indent the current line
<< --> De-Indent the current line
>k --> indent the current line and the line above
>j --> indent the current line and the line below
>} --> indent till the end of the paragraph
ctrl + o --> move the cursor way back to historical placeholders (Jump List --> :jumps, :clearjumps) also jump id can be prepended to ctrl+o to go that specific jump
ctrl + i --> move the cursor forward from historical placeholders to current placeholder (Jump List)
J --> to join the below line with space in between
r <Enter> --> Will break the line from current cursor position to next line
ma --> mark current position of the cursor to the assigned letter (a-z). Note: small letter will only allow to jump inside current buffer
`a --> jump to position of mark a
y`a --> yank text to position of mark a
mA --> mark current position of the cursor to the assigned letter (A-Z). Note: To jump from different buffers
ctrl + a --> to increment a number
ctrl + x --> to decrement a number
To increment a column or lines of number based on the previous number use (g ctrl + a)
2g followed by Ctrl+a increment by 2 for the first line, by 4 for the second line, by 6 for the third line and so on
5 followed by ctrl + a, will add 5 to the number under cursor (vice versa for ctrl + x)
:set number! will toggle the line numbers either off or on depending on their current state. 
You can also check the current state of any option by adding a question mark ? to the end :set number? will return either number or nonumber depending on if the option is on or off.
ysiw, ys3w --> Surround with brackets,quotes plugin (nvim only)


Supermacy of 'g'
---------------
gj, gk --> To go line by line in a big paragraph. we can remap j and k to gj and gk
g0,g$ --> To go to start or end of current line in a paragraph
gqq (last q is text object),gq5j --> to auto format the paragraph. can be mapped to Q

~    : Changes the case of current character

u --> lower case U --> upper case
guu/gUU  : Change current line
gu$  : change case to lower from current cursor position to end of the current line 
g~~  : Invert case to entire line
gU5j/gu5k : Change 5 lines below/above to upper case

gU3w : change case to upper from current word +2
g~w  : Invert case to current WORD
gUfl : change case to upper from current cursor till the find character (l in this case)
guw/gUw  : Change to end of current WORD
guaw/gUaw : Change all of current WORD to lower/upper.

guG  : Change to lowercase until the end of document.
gU)  : Change until end of sentence to upper case
gu}  : Change to end of paragraph to lower case

gx --> open link under cursor in default browser
gf --> when the cursor is under any file name or path to file it will open in a sep window and will have option to close and back to original editor
gv --> When any word or group of words is selected, use this to go back to the selection from anywhere in the file
gi --> go to last insert mode used position
g; --> go to the previous change location (normal)
g, --> go to the newer change location
gn --> go to the last search pattern forward, defaults to visual mode. Can be used with any normal commands like dgn (delete next matched word forward)
gJ --> Join lines without space in between
gm --> move to the middle of the current screen line (based on screen width)
gM --> move to the middle of the current line
g_lD --> Delete all the trailing whitespace on the line
g& --> if we run a subsititute query in one line, later if decide to run the same query for whole document, Use this. 
       Note that the sub query you need to run again should be the one executed recently
gg=G --> Indent the whole file
ggdG --> Delete whole file contents
Ctrl+g --> display file information like name, number of lines, etc at the bottom of the screen
           g followed by Ctrl+g display information about the current location of the cursor (column, line, word, character and byte counts)
ga --> shows the codepoint value of the character under the cursor in decimal, octal and hexadecimal formats
